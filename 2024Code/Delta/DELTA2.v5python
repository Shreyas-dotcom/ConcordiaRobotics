{"mode":"Text","hardwareTarget":"brain","textContent":"# Delta 1, Dec 10 2024 \n\n# region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\ncontroller_1 = Controller()\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\n\n# Left Drive\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nleft_motor_c = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)\n\n# Right Drive\nright_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nright_motor_c = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)\n\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n# Twin 5.5w motors\nmotor_group_8_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nmotor_group_8_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nmotor_group_8 = MotorGroup(motor_group_8_motor_a, motor_group_8_motor_b)\n\n# Intake Motor\nIntake = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\nIntake.set_velocity(90, PERCENT)\n\n# Controller Initialization\ncontroller_1 = Controller()\n\n# Speed Settings\nleft_drive_smart.set_velocity(100, PERCENT)\nright_drive_smart.set_velocity(100, PERCENT)\nmotor_group_8.set_velocity(100, PERCENT)\n\n# Define Piston1 (assuming it uses a digital output port)\nPiston1 = DigitalOut(brain.three_wire_port.a)\n\nstateB = False\n\n# endregion VEXcode Generated Robot Configuration\n\nmyVariable = 0\n\ndef when_started1():\n    global myVariable\n    pass\n\ndef onauton_autonomous_0():\n    global myVariable\n    # Autonomous logic goes here\n    drivetrain.drive(FORWARD)\n    wait(0.25,SECONDS)\n    drivetrain.stop()\n    motor_group_8.spin(FORWARD)\n    wait(1.1,SECONDS)\n    motor_group_8.stop()\n    right_drive_smart.spin(REVERSE)\n    wait(2,SECONDS)\n    right_drive_smart.stop()\n    drivetrain.drive(REVERSE)\n    wait(1.5,SECONDS)\n    drivetrain.stop()\n    Piston1.set(True)\n\n\n    # add code here \n\n    pass\n\ndef ondriver_drivercontrol_0():\n    global myVariable, stateB\n\n    # Driver Control Logic\n    while True:\n        # Drive logic\n        left_drive_smart.spin(FORWARD, controller_1.axis3.position(), VOLT)\n        right_drive_smart.spin(FORWARD, controller_1.axis2.position(), VOLT)\n\n        # Intake control logic\n        if controller_1.buttonR1.pressing():\n            Intake.spin(REVERSE)\n        elif controller_1.buttonR2.pressing():\n            Intake.spin(FORWARD)\n        else:\n            Intake.stop()\n\n        # Motor group control logic\n        if controller_1.buttonL1.pressing():\n            motor_group_8.spin(REVERSE)\n            stateB = False\n        elif controller_1.buttonL2.pressing():\n            motor_group_8.spin(FORWARD)\n            stateB = False\n        else:\n            motor_group_8.stop()\n\n            if stateB:\n                motor_group_8.spin_to_position(0, DEGREES)  # Change this value\n\n        if controller_1.buttonRight.pressing():\n            motor_group_8.spin_to_position(0, DEGREES)  # Change this value\n            stateB = True\n\n        # Piston control logic\n        if controller_1.buttonUp.pressing():\n            Piston1.set(True)\n        else: \n            Piston1.set(False)\n\n        # Uncomment if Piston2 is defined\n        # if controller_1.buttonL1.pressing():\n        #     Piston2.set(True)\n        # if controller_1.buttonL2.pressing():\n        #     Piston2.set(False)\n\n        wait(5, MSEC)  # reset wait \n\n# Create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    #motor_group_8.set_position(\n\n\n    auton_task_0 = Thread(onauton_autonomous_0)\n    # Wait for the driver control period to end\n    while competition.is_autonomous() and competition.is_enabled():\n        # Wait 10 milliseconds before checking again\n        wait(10, MSEC)\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread(ondriver_drivercontrol_0)\n\n    # Wait for the driver control period to end\n    while competition.is_driver_control() and competition.is_enabled():\n        # Wait 10 milliseconds before checking again\n        wait(10, MSEC)\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n# Register the competition functions\ncompetition = Competition(vexcode_driver_function, vexcode_auton_function)\n\nwhen_started1()","textLanguage":"python","robotConfig":[],"slot":7,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}