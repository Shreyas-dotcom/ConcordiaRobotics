# Delta 1, Dec 10 2024 

# region VEXcode Generated Robot Configuration
from vex import *
import urandom
controller_1 = Controller()

# Brain should be defined by default
brain = Brain()

# Robot configuration code

# Left Drive
left_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_motor_c = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)
left_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)

# Right Drive
right_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)
right_motor_c = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)

drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)

# Twin 5.5w motors
motor_group_8_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)
motor_group_8_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)
motor_group_8 = MotorGroup(motor_group_8_motor_a, motor_group_8_motor_b)

# Intake Motor
Intake = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)
Intake.set_velocity(90, PERCENT)

# Controller Initialization
controller_1 = Controller()

# Speed Settings
left_drive_smart.set_velocity(100, PERCENT)
right_drive_smart.set_velocity(100, PERCENT)
motor_group_8.set_velocity(100, PERCENT)

# Define Piston1 (assuming it uses a digital output port)
Piston1 = DigitalOut(brain.three_wire_port.a)

stateB = False

# endregion VEXcode Generated Robot Configuration

myVariable = 0

def when_started1():
    global myVariable
    pass

def onauton_autonomous_0():
    global myVariable
    # Autonomous logic goes here


    # add code here 

    pass

def ondriver_drivercontrol_0():
    global myVariable, stateB

    # Driver Control Logic
    while True:
        # Drive logic
        left_drive_smart.spin(FORWARD, controller_1.axis3.position(), VOLT)
        right_drive_smart.spin(FORWARD, controller_1.axis2.position(), VOLT)

        # Intake control logic
        if controller_1.buttonR1.pressing():
            Intake.spin(REVERSE)
        elif controller_1.buttonR2.pressing():
            Intake.spin(FORWARD)
        else:
            Intake.stop()

        # Motor group control logic
        if controller_1.buttonL1.pressing():
            motor_group_8.spin(REVERSE)
            stateB = False
        elif controller_1.buttonL2.pressing():
            motor_group_8.spin(FORWARD)
            stateB = False
        else:
            motor_group_8.stop()

            if stateB:
                motor_group_8.spin_to_position(0, DEGREES)  # Change this value

        if controller_1.buttonRight.pressing():
            motor_group_8.spin_to_position(0, DEGREES)  # Change this value
            stateB = True

        # Piston control logic
        if controller_1.buttonUp.pressing():
            Piston1.set(True)
        else: 
            Piston1.set(False)

        # Uncomment if Piston2 is defined
        # if controller_1.buttonL1.pressing():
        #     Piston2.set(True)
        # if controller_1.buttonL2.pressing():
        #     Piston2.set(False)

        wait(5, MSEC)  # reset wait 

# Create a function for handling the starting and stopping of all autonomous tasks
def vexcode_auton_function():
    # Start the autonomous control tasks
    #motor_group_8.set_position(


    auton_task_0 = Thread(onauton_autonomous_0)
    # Wait for the driver control period to end
    while competition.is_autonomous() and competition.is_enabled():
        # Wait 10 milliseconds before checking again
        wait(10, MSEC)
    # Stop the autonomous control tasks
    auton_task_0.stop()

def vexcode_driver_function():
    # Start the driver control tasks
    driver_control_task_0 = Thread(ondriver_drivercontrol_0)

    # Wait for the driver control period to end
    while competition.is_driver_control() and competition.is_enabled():
        # Wait 10 milliseconds before checking again
        wait(10, MSEC)
    # Stop the driver control tasks
    driver_control_task_0.stop()

# Register the competition functions
competition = Competition(vexcode_driver_function, vexcode_auton_function)

when_started1()
