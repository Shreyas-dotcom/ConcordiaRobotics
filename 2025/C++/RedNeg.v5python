{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n# Delta 1, Dec 10 2024 \n\n# region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\ncontroller_1 = Controller()\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\n\n# Left Drive\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nleft_motor_c = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)\n\n# Right Drive\nright_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nright_motor_c = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)\n\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n# Twin 5.5w motors\nmotor_group_8_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nmotor_group_8_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nmotor_group_8 = MotorGroup(motor_group_8_motor_a, motor_group_8_motor_b)\n\n# Intake Motor\nIntake = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\nIntake.set_velocity(90, PERCENT)\n\n# Controller Initialization\ncontroller_1 = Controller()\n\n# Speed Settings\nleft_drive_smart.set_velocity(100, PERCENT)\nright_drive_smart.set_velocity(100, PERCENT)\nmotor_group_8.set_velocity(100, PERCENT)\n\n# Define Piston1 (assuming it uses a digital output port)\nPiston1 = DigitalOut(brain.three_wire_port.a)\nPiston2 = DigitalOut(brain.three_wire_port.b)\n\nstateB = False\n\n# endregion VEXcode Generated Robot Configuration\n\nmyVariable = 0\n\ncmPer = 20.2\n\ndef move(cm, vel):\n    left_drive_smart.set_velocity(vel, PERCENT)\n    right_drive_smart.set_velocity(vel, PERCENT)\n    left_drive_smart.spin_for(FORWARD, cm / cmPer, TURNS, wait = False)\n    right_drive_smart.spin_for(FORWARD, cm / cmPer, TURNS, wait = False)\n    wait(10 * abs(cm) / (vel * cmPer), SECONDS)\ndef rotate(deg, vel):\n    left_drive_smart.set_velocity(vel, PERCENT)\n    right_drive_smart.set_velocity(vel, PERCENT)\n    left_drive_smart.spin_for(FORWARD, deg / 72, TURNS, wait = False)\n    right_drive_smart.spin_for(REVERSE, deg / 72, TURNS, wait = False)\n    wait(10 * abs(deg) / (vel * cmPer), SECONDS)\n\ndef when_started1():\n    global myVariable\n    pass\n\ndef onauton_autonomous_0():\n    global myVariable\n    \n\n    #Move forward a bit\n    move(25,20)\n    #Lady brown down\n    motor_group_8.spin_to_position(480, DEGREES)\n    wait(50,MSEC)\n    #Lady brown up\n    motor_group_8.spin_to_position(0, DEGREES)\n    #Move reverse to position 1\n    move(-65,50)\n    #Turn right to face goal 1\n    rotate(73,30)\n    #move reverse to goal 1\n    move(-67,40)\n    wait(6,MSEC)\n    #Clamp DOWN\n    Piston1.set(True)\n    #Turn right 90\n    rotate(90,30)\n    #Move forward while intaking\n    Intake.spin(REVERSE)\n    move(100, 80)\n    move(-5,50)\n    Intake.spin(REVERSE)\n    move(-5,60)\n    wait(1.75,SECONDS)\n    Intake.spin(FORWARD)\n    wait(0.25,SECONDS)\n    Intake.stop()\n    #Turn right 90\n    rotate(98.7, 30)\n    #move forward while intaking\n    Intake.spin(REVERSE)\n    move(31,60)\n    wait(2.5,SECONDS)\n    #move reverse a bit\n    move(-20,70)  \n    #reverse intake for a bit\n    Intake.spin(FORWARD)\n    wait(0.5,SECONDS) \n    Intake.stop()\n    #turn right 45\n    #move forward to climbing wall\n    move(-10,100)\n\n    # add code here \n\n    pass\nclamped1 = True\nclampPressed1 = False\nclamped2 = True\nclampPressed2 = False\n\n\ndef ondriver_drivercontrol_0():\n    global myVariable, stateB, clamped1, clampPressed1, clamped2, clampPressed2\n\n    # Driver Control Logic\n    while True:\n        # Drive logic\n        left_drive_smart.spin(FORWARD, controller_1.axis3.position(), VOLT)\n        right_drive_smart.spin(FORWARD, controller_1.axis2.position(), VOLT)\n\n        # Intake control logic\n        if controller_1.buttonR1.pressing():\n            Intake.spin(REVERSE)\n        elif controller_1.buttonR2.pressing():\n            Intake.spin(FORWARD)\n        else:\n            Intake.stop()\n\n        # Motor group control logic\n        if controller_1.buttonL1.pressing():\n            motor_group_8.spin(REVERSE)\n            stateB = False\n        elif controller_1.buttonL2.pressing():\n            motor_group_8.spin(FORWARD)\n            stateB = False\n        else:\n            motor_group_8.stop()\n\n            if stateB:\n                motor_group_8.spin_to_position(93, DEGREES)  # Change this value\n\n        if controller_1.buttonRight.pressing():\n            motor_group_8.spin_to_position(93, DEGREES)  # Change this value\n            stateB = True\n\n        # Piston control logic\n        if (controller_1.buttonY.pressing()):\n            if (clampPressed1):\n                if (clamped1):\n                    Piston1.set(False)\n                    clamped1 = False\n                else: \n                    Piston1.set(True)\n                    clamped1 = True\n                clampPressed1 = False\n        else:\n            clampPressed1 = True\n        \n\n        if (controller_1.buttonA.pressing()):\n            if (clampPressed2):\n                if (clamped2):\n                    Piston2.set(False)\n                    clamped2 = False\n                else: \n                    Piston2.set(True)\n                    clamped2 = True\n                clampPressed2 = False\n        else:\n            clampPressed2 = True\n\n        wait(5, MSEC)  # reset wait \n\n# Create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    #motor_group_8.set_position(\n\n\n    auton_task_0 = Thread(onauton_autonomous_0)\n    # Wait for the driver control period to end\n    while competition.is_autonomous() and competition.is_enabled():\n        # Wait 10 milliseconds before checking again\n        wait(10, MSEC)\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread(ondriver_drivercontrol_0)\n\n    # Wait for the driver control period to end\n    while competition.is_driver_control() and competition.is_enabled():\n        # Wait 10 milliseconds before checking again\n        wait(10, MSEC)\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n# Register the competition functions\ncompetition = Competition(vexcode_driver_function, vexcode_auton_function)\n\nwhen_started1()","textLanguage":"python","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}